buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.apache.httpcomponents:httpclient:4.5.2"
    }
}

plugins {
    id 'org.jetbrains.intellij' version '0.0.43'
    id "de.undercouch.download" version "3.1.0"
}

import de.undercouch.gradle.tasks.download.Download
import groovy.json.JsonSlurper

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'idea'

intellij {
    version ideaVersion
    type ideaType
    plugins = ['php', 'java-i18n', 'properties', 'CSS']
    updateSinceUntilBuild false
    sameSinceUntilBuild false
    sandboxDirectory "${project.rootDir}/.sandbox"
    pluginName name
}

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

sourceSets {
    main {
        kotlin.srcDirs += 'src'
        resources.srcDir 'resources'
    }
    test {
        kotlin.srcDir 'tests'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

repositories {
    mavenCentral()
}

// Big thanks to https://github.com/orocrm/oro-phpstorm-plugin
def phpPluginFiles(String version) {
    fileTree(dir: "${project.intellij.ideaDirectory}/plugins/php-$version/php/lib/", include: '*.jar')
}

def phpGetPluginUrl(String version) {
    def jsonText = new URL('https://plugins.jetbrains.com/plugin/updates?pluginId=6610&channel=&start=0&size=1000').getText()
    def versions = new JsonSlurper().parseText(jsonText).updates

    if (version == "LATEST") {
        return versions[0].file
    } else {
        return versions.find { it.updateVersion == version }.file
    }
}

afterEvaluate {
    it.tasks.findByName("compileKotlin").dependsOn("downloadAndUnzipPhpPlugin")
    it.intellij.intellijFiles.addAll(phpPluginFiles(phpPluginVersion).getFiles())

    project.tasks.create(name: "downloadPhpPlugin", type: Download) {
        def output = new File("${project.intellij.ideaDirectory}/plugins/php-${phpPluginVersion}.zip")

        src "https://plugins.jetbrains.com/files/${phpGetPluginUrl(phpPluginVersion)}"
        dest output
        overwrite false
    }

    project.tasks.create(name: "downloadAndUnzipPhpPlugin", dependsOn: "downloadPhpPlugin", type: Copy) {
        from zipTree(downloadPhpPlugin.dest)
        into "${project.intellij.ideaDirectory}/plugins/php-$phpPluginVersion"
    }

    dependencies {
        compile phpPluginFiles(phpPluginVersion)
    }
}



